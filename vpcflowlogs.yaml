AWSTemplateFormatVersion: "2010-09-09"
Description: Working with AWS VPC Flow Logs for Network Monitoring
Resources:
  VPCFlowLogsBucket:
    Type: AWS::S3::Bucket

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Application
          Value: !Ref "AWS::StackId"
        - Key: Name
          Value: NiteenTest01
        - Key: Network
          Value: VPC
  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref "VPC"
      CidrBlock: 10.0.1.0/24
      Tags:
        - Key: Application
          Value: !Ref "AWS::StackId"
      AvailabilityZone: !Select
        - "0"
        - !GetAZs ""
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Application
          Value: !Ref "AWS::StackId"
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref "VPC"
      InternetGatewayId: !Ref "InternetGateway"
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref "VPC"
      Tags:
        - Key: Application
          Value: !Ref "AWS::StackId"
  Route:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref "RouteTable"
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref "InternetGateway"
  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref "Subnet"
      RouteTableId: !Ref "RouteTable"
  NetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref "VPC"
      Tags:
        - Key: Application
          Value: !Ref "AWS::StackId"
  InboundHTTPNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref "NetworkAcl"
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: 80
        To: 80
  InboundSSHNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref "NetworkAcl"
      RuleNumber: 101
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: 22
        To: 22
  InboundResponsePortsNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref "NetworkAcl"
      RuleNumber: 102
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: 1024
        To: 65535
  OutBoundHTTPNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref "NetworkAcl"
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: 80
        To: 80
  OutBoundHTTPSNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref "NetworkAcl"
      RuleNumber: 101
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: 443
        To: 443
  OutBoundResponsePortsNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref "NetworkAcl"
      RuleNumber: 102
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: 1024
        To: 65535
  SubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref "Subnet"
      NetworkAclId: !Ref "NetworkAcl"
  SecurityGroupHTTPAndSSH:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref "VPC"
      GroupDescription: HTTP and SSH Access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value: HTTP and SSH Access
  SecurityGroupHTTPOnly:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref "VPC"
      GroupDescription: HTTP Access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value: HTTP Access
  LogRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - vpc-flow-logs.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: LogRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:Create*
                  - logs:PutLogEvents
                  - logs:Describe*
                Resource:
                  - arn:aws:logs:*:*:*
  LogRoleInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref "LogRole"
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: "ami-096e189c66c11b2b5"
      InstanceType: t3a.micro
      UserData:
        Fn::Base64: |
          #!/bin/bash
          echo '0R!*p5|j' | passwd niteen_test --stdin
          yum update -y
          yum install -y httpd
          service httpd start
          chkconfig httpd on
          groupadd www
          usermod -a -G www niteen_test
          echo '<html><h1>AWS VPC Flow Logs</h1><h3>Availability Zone: ' > /var/www/html/index.html
          curl http://169.254.169.254/latest/meta-data/placement/availability-zone >> /var/www/html/index.html
          echo '</h3> <h3>Instance Id: ' >> /var/www/html/index.html
          curl http://169.254.169.254/latest/meta-data/instance-id >> /var/www/html/index.html
          echo '</h3></html> ' >> /var/www/html/index.html
      Tags:
        - Key: Application
          Value: !Ref "AWS::StackId"
        - Key: Name
          Value: Web Server
      IamInstanceProfile: !Ref "LogRoleInstanceProfile"
      NetworkInterfaces:
        - GroupSet:
            - !Ref "SecurityGroupHTTPAndSSH"
          AssociatePublicIpAddress: true
          DeviceIndex: "0"
          DeleteOnTermination: true
          SubnetId: !Ref "Subnet"

  # VPCFlowLogsLogGroup:
  #   Type: AWS::Logs::LogGroup

  # EnableVpcFlowLogs:
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     Description: Extract the VPC ID from the event and enable VPC Flow Logs.
  #     Handler: index.lambda_handler
  #     Role: !GetAtt "LambdaExecutionRole.Arn"
  #     Runtime: python3.6
  #     Timeout: 5
  #     Environment:
  #       Variables:
  #         FLOWLOGS_GROUP_NAME: !Ref "VPCFlowLogsLogGroup"
  #         ROLE_ARN: !GetAtt "DeliverVPCFlowLogsRole.Arn"
  #     Code:
  #       ZipFile: |
  #         import boto3
  #         import os

  #         def lambda_handler(event, context):
  #             '''
  #             Extract the VPC ID from the event and enable VPC Flow Logs.
  #             '''

  #             try:
  #                 vpc_id = event['detail']['responseElements']['vpc']['vpcId']

  #                 print('VPC: ' + vpc_id)

  #                 ec2_client = boto3.client('ec2')

  #                 response = ec2_client.describe_flow_logs(
  #                     Filter=[
  #                         {
  #                             'Name': 'resource-id',
  #                             'Values': [
  #                                 vpc_id,
  #                             ]
  #                         },
  #                     ],
  #                 )

  #                 if len(response[u'FlowLogs']) != 0:
  #                     print('VPC Flow Logs are ENABLED')
  #                 else:
  #                     print('VPC Flow Logs are DISABLED')

  #                     print('FLOWLOGS_GROUP_NAME: ' + os.environ['FLOWLOGS_GROUP_NAME'])
  #                     print('ROLE_ARN: ' + os.environ['ROLE_ARN'])

  #                     response = ec2_client.create_flow_logs(
  #                         ResourceIds=[vpc_id],
  #                         ResourceType='VPC',
  #                         TrafficType='ALL',
  #                         LogGroupName=os.environ['FLOWLOGS_GROUP_NAME'],
  #                         DeliverLogsPermissionArn=os.environ['ROLE_ARN'],
  #                     )

  #                     print('Created Flow Logs: ' + response['FlowLogIds'][0])

  #             except Exception as e:
  #                 print('Error - reason "%s"' % str(e))

  DeliverVPCFlowLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - vpc-flow-logs.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: flowlogs-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DeleteFlowLogs
                  - ec2:CreateFlowLogs
                  - ec2:DescribeFlowLogs
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - ec2:CreateFlowLogs
                Resource: "*"

  # LambdaExecutionRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: lambda.amazonaws.com
  #           Action: sts:AssumeRole
  # LambdaPolicy:
  #   Type: AWS::IAM::Policy
  #   Properties:
  #     PolicyName: root
  #     PolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: Allow
  #           Action:
  #             - iam:PassRole
  #             - logs:*
  #             - ec2:*
  #           Resource: "*"
  #     Roles:
  #       - !Ref "LambdaExecutionRole"
  # CloudTrailLogGroup:
  #   Type: AWS::Logs::LogGroup
  # CloudTrail:
  #   Type: AWS::CloudTrail::Trail
  #   Properties:
  #     IncludeGlobalServiceEvents: true
  #     IsLogging: true
  #     IsMultiRegionTrail: false
  #     S3BucketName: !Ref "CloudTrailBucket"
  #     CloudWatchLogsLogGroupArn: !GetAtt "CloudTrailLogGroup.Arn"
  #     CloudWatchLogsRoleArn: !GetAtt "CloudTrailRole.Arn"
  #   DependsOn:
  #     - CloudTrailBucketPolicy
  # CloudTrailRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Action:
  #             - sts:AssumeRole
  #           Effect: Allow
  #           Principal:
  #             Service:
  #               - cloudtrail.amazonaws.com
  #     Policies:
  #       - PolicyName: logs
  #         PolicyDocument:
  #           Version: "2012-10-17"
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - logs:*
  #               Resource: "*"
  # CloudTrailBucket:
  #   Type: AWS::S3::Bucket
  # CloudTrailBucketPolicy:
  #   Type: AWS::S3::BucketPolicy
  #   Properties:
  #     Bucket: !Ref "CloudTrailBucket"
  #     PolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Sid: AWSCloudTrailAclCheck
  #           Effect: Allow
  #           Principal:
  #             Service: cloudtrail.amazonaws.com
  #           Action: s3:GetBucketAcl
  #           Resource: !GetAtt "CloudTrailBucket.Arn"
  #         - Sid: AWSCloudTrailWrite
  #           Effect: Allow
  #           Principal:
  #             Service: cloudtrail.amazonaws.com
  #           Action: s3:PutObject
  #           Resource: !Sub "${CloudTrailBucket.Arn}/*"
  #           Condition:
  #             StringEquals:
  #               s3:x-amz-acl: bucket-owner-full-control
Outputs:
  pubIpAddress1:
    Description: Public IP address of EC2 instance
    Value: !GetAtt "EC2Instance.PublicIp"
  # privIpAddress1:
  #   Description: Private IP address of Web Server
  #   Value: !GetAtt "EC2Instance.PrivateIp"
  pubIpAddress2:
    Description: VPC Flow Logs S3 Bucket ARN
    Value: !GetAtt VPCFlowLogsBucket.Arn